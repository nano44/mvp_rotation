# noqa: D401
"""
Human-facing reporting helpers for performance comparison runs.
"""

from __future__ import annotations

from typing import Dict, Literal

Tier = Literal["smoke", "regression", "full"]


def assemble_markdown_report(
    diff: Dict[str, Dict[str, float]],
    baseline: Dict[str, float],
    candidate: Dict[str, float],
    tier: Tier,
) -> str:
    lines = [
        "# Strategy Performance Comparison",
        "",
        f"- Tier: `{tier}`",
        "- Seeds fixed (`PYTHONHASHSEED=0`, `NUMPY_SEED=1234`).",
        "",
        "## Metric Delta Summary",
        "| Metric | Baseline | Candidate | Î” | Î”% |",
        "| --- | --- | --- | --- | --- |",
    ]
    for metric, payload in diff.items():
        base = payload["baseline"]
        cand = payload["candidate"]
        delta = payload["delta"]
        delta_pct = payload["delta_pct"]
        delta_pct_str = "nan" if delta_pct != delta_pct else f"{delta_pct:.4f}"
        lines.append(f"| {metric} | {base:.4f} | {cand:.4f} | {delta:.4f} | {delta_pct_str} |")

    lines.extend(
        [
            "",
            "## Stability Checks",
            "- Rolling IR variance, walk-forward IR, and turnover deltas captured above.",
            "",
            "## Plots",
            "- See attached PNGs generated by `scripts/report.py`.",
            "",
            "## Notes",
            "- Refer to docs/RUNBOOK.md for override protocol.",
        ]
    )
    return "\n".join(lines)


def write_pr_comment_payload(diff: Dict[str, Dict[str, float]], evaluation: Dict[str, object]) -> str:
    status_emoji = "âœ…" if evaluation["status"] == "pass" else "ðŸš¨"
    lines = [
        f"{status_emoji} **Performance Check ({evaluation['tier']})** â€” `{evaluation['status']}`",
        "",
        "| Metric | Î” | Î”% |",
        "| --- | --- | --- |",
    ]
    for metric, payload in diff.items():
        delta_pct = payload["delta_pct"]
        delta_pct_str = "nan" if delta_pct != delta_pct else f"{delta_pct:.4f}"
        lines.append(f"| {metric} | {payload['delta']:.4f} | {delta_pct_str} |")

    failures = evaluation.get("failures") or []
    if failures:
        lines.append("")
        lines.append("**Threshold breaches:**")
        for failure in failures:
            lines.append(f"- {failure}")

    lines.append("")
    lines.append("_Full report attached as workflow artifact._")
    return "\n".join(lines)

